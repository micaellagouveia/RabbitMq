{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RabbitMq Message broker : interm\u00e9dio entre a mensagem recebida e quem a enviou. Utiliza HTTP request. Client - TCP - Server O rabbitMQ abre apenas uma conex\u00e3o com o server, e dentro dela h\u00e1 subconex\u00f5es( channels ). * Channels s\u00e3o como threads. Publisher - Exchange - Queue - Consumer A exchange processa a mensagem e manda para uma determinada fila (queue). Exchanges 1. Direct H\u00e1 uma routing key que determina para qual fila a mensagem ser\u00e1 enviada. 2. Fanout N\u00e3o h\u00e1 uma routing key, ent\u00e3o a mensagem \u00e9 replicada para todas as filas que est\u00e3o relacionadas com a exchange. Mais sobre Fanout 3. Topic Possui uma routing key com regras, com um padr\u00e3o. Apenas mensagem com aquele padr\u00e3o entram na determinada fila. Existem dois casos especiais importantes para vincular chaves: '*' (estrela) pode substituir exatamente uma palavra. '#' (hash) pode substituir por zero ou por mais palavras. Queues Filas s\u00e3o FIFO (First in First out). Propriedades Durable : quando reiniciar o broker, a fila continua l\u00e1. Auto Delete : quando o consumer se desconecta, a fila \u00e9 apagada. Expiry : Tempo de espera de inatividade. Message TTL : tempo de vida de mensagem. Exclusive : usada por apenas uma conex\u00e3o e a fila ser\u00e1 exclu\u00edda quando a conex\u00e3o for fechada. Max length ou bytes : quantidade m\u00e1xima de mensagens ou de bytes. Overflow : limite de mensagens ou bytes. Mais sobre Queues","title":"Home"},{"location":"#rabbitmq","text":"Message broker : interm\u00e9dio entre a mensagem recebida e quem a enviou. Utiliza HTTP request.","title":"RabbitMq"},{"location":"#client-tcp-server","text":"O rabbitMQ abre apenas uma conex\u00e3o com o server, e dentro dela h\u00e1 subconex\u00f5es( channels ). * Channels s\u00e3o como threads.","title":"Client -&gt; TCP -&gt; Server"},{"location":"#publisher-exchange-queue-consumer","text":"A exchange processa a mensagem e manda para uma determinada fila (queue).","title":"Publisher  -&gt;  Exchange  -&gt;  Queue  -&gt;  Consumer"},{"location":"#exchanges","text":"","title":"Exchanges"},{"location":"#1-direct","text":"H\u00e1 uma routing key que determina para qual fila a mensagem ser\u00e1 enviada.","title":"1. Direct"},{"location":"#2-fanout","text":"N\u00e3o h\u00e1 uma routing key, ent\u00e3o a mensagem \u00e9 replicada para todas as filas que est\u00e3o relacionadas com a exchange. Mais sobre Fanout","title":"2. Fanout"},{"location":"#3-topic","text":"Possui uma routing key com regras, com um padr\u00e3o. Apenas mensagem com aquele padr\u00e3o entram na determinada fila. Existem dois casos especiais importantes para vincular chaves: '*' (estrela) pode substituir exatamente uma palavra. '#' (hash) pode substituir por zero ou por mais palavras.","title":"3. Topic"},{"location":"#queues","text":"Filas s\u00e3o FIFO (First in First out).","title":"Queues"},{"location":"#propriedades","text":"Durable : quando reiniciar o broker, a fila continua l\u00e1. Auto Delete : quando o consumer se desconecta, a fila \u00e9 apagada. Expiry : Tempo de espera de inatividade. Message TTL : tempo de vida de mensagem. Exclusive : usada por apenas uma conex\u00e3o e a fila ser\u00e1 exclu\u00edda quando a conex\u00e3o for fechada. Max length ou bytes : quantidade m\u00e1xima de mensagens ou de bytes. Overflow : limite de mensagens ou bytes. Mais sobre Queues","title":"Propriedades"},{"location":"Resumos/fanout/","text":"Fanout Publish/Subscribe N\u00e3o precisa de chaves/nomes. Estamos interessados apenas nas mensagens que fluem, e n\u00e3o nas antigas. Pr\u00e9 requisitos: uma fila nova e vazia, e exclusiva(quando a conex\u00e3o encerrar, a fila ser\u00e1 exclu\u00edda).","title":"Fanout"},{"location":"Resumos/fanout/#fanout","text":"Publish/Subscribe N\u00e3o precisa de chaves/nomes. Estamos interessados apenas nas mensagens que fluem, e n\u00e3o nas antigas. Pr\u00e9 requisitos: uma fila nova e vazia, e exclusiva(quando a conex\u00e3o encerrar, a fila ser\u00e1 exclu\u00edda).","title":"Fanout"},{"location":"Resumos/queue/","text":"Queues Filas s\u00e3o FIFO (First in First out). Propriedades Durable : quando reiniciar o broker, a fila continua l\u00e1. Auto Delete : quando o consumer se desconecta, a fila \u00e9 apagada. Expiry : Tempo de espera de inatividade. Message TTL : tempo de vida de mensagem. Exclusive : somente o channel que criou a fila pode acess\u00e1-la. Max length ou bytes : quantidade m\u00e1xima de mensagens ou de bytes. Overflow : limite de mensagens ou bytes. Bindings Processo que relaciona a fila com a exchange. A fila que tiver bind possui uma conex\u00e3o com a exchange. No caso da exchange Fanout, todas as que possuem blind ir\u00e3o receber a mensagem. Para ver a lista de bindings: rabbitmqctl list_bindings Dead Letter Queue Algumas mensagens n\u00e3o conseguem ser entregues por algum motivo. Elas s\u00e3o encaminhadas para uma exchange que manda para uma fila dead letter. Outro sistema buscar\u00e1 o motivo para ela n\u00e3o ter sido lida. * Task Queue Fila de tarefas. Encapsulamento de uma tarefa como uma mensagem. * Enviamos a mensagem para uma fila, criando uma fila de tarefas. * A ideia \u00e9 evitar executar uma tarefa que consome muitos recursos imediatamente e outra tarefa ter que esperar a coonclus\u00e3o. Ent\u00e3o se faz o agendamento dessa tarefa para ser executada mais tarde. * Uma das vantagens de se utilizar uma lista de tarefas \u00e9 o trabalho paralelo (Round-robin) . Round-robin : Se tiver mais de um consumidor, a mensagem ser\u00e1 enviada para o pr\u00f3ximo consumidor, em sequ\u00eancia. Automatic Acknowledgment Mode Modo de reconhecimento autom\u00e1tico (ack). * Impede que uma mensagem se perca caso um consumidor falhar(canal fechado, conxe\u00e3o fechada, TCP perdido). Como funciona: 1. uma confirma\u00e7\u00e3o \u00e9 enviada pelo consumidor quando uma mensagem foi recebida, processada e que pode ser exclu\u00edda. 2. Se um consumidor morre sem enviar essa confirma\u00e7\u00e3o, o RabbitMQ entender\u00e1 que a mensagem n\u00e3o foi processada e a enfileirar\u00e1 novamente. 3. Se j\u00e1 houver outros consumidores online, esta ser\u00e1 entregue para ele. 4. N\u00e3o h\u00e1 nenhum tempo limite da mensagem. O rabbitMQ retornar\u00e1 a mensagem quando o consumidor morrer. Obs: A confirma\u00e7\u00e3o deve ser enviada no mesmo canal que recebeu a entrega!!!!!!! Para printar mensagens que n\u00e3o foram confirmadas(caso esque\u00e7a do ack): sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged Prefetch(x) M\u00e9todo de pr\u00e9-busca. Indica ao RabbitMQ para n\u00e3o transmitit mais de x mensagens para um worker por vez. (n\u00e3o despache uma nova mensagem para um worker at\u00e9 que ele tenha terminado a anterior, em vez disso, ser\u00e1 enviado para o pr\u00f3ximo worker que n\u00e3o estiver ocupado)","title":"Queue"},{"location":"Resumos/queue/#queues","text":"Filas s\u00e3o FIFO (First in First out).","title":"Queues"},{"location":"Resumos/queue/#propriedades","text":"Durable : quando reiniciar o broker, a fila continua l\u00e1. Auto Delete : quando o consumer se desconecta, a fila \u00e9 apagada. Expiry : Tempo de espera de inatividade. Message TTL : tempo de vida de mensagem. Exclusive : somente o channel que criou a fila pode acess\u00e1-la. Max length ou bytes : quantidade m\u00e1xima de mensagens ou de bytes. Overflow : limite de mensagens ou bytes.","title":"Propriedades"},{"location":"Resumos/queue/#bindings","text":"Processo que relaciona a fila com a exchange. A fila que tiver bind possui uma conex\u00e3o com a exchange. No caso da exchange Fanout, todas as que possuem blind ir\u00e3o receber a mensagem. Para ver a lista de bindings: rabbitmqctl list_bindings","title":"Bindings"},{"location":"Resumos/queue/#dead-letter-queue","text":"Algumas mensagens n\u00e3o conseguem ser entregues por algum motivo. Elas s\u00e3o encaminhadas para uma exchange que manda para uma fila dead letter. Outro sistema buscar\u00e1 o motivo para ela n\u00e3o ter sido lida.","title":"Dead Letter Queue"},{"location":"Resumos/queue/#task-queue","text":"Fila de tarefas. Encapsulamento de uma tarefa como uma mensagem. * Enviamos a mensagem para uma fila, criando uma fila de tarefas. * A ideia \u00e9 evitar executar uma tarefa que consome muitos recursos imediatamente e outra tarefa ter que esperar a coonclus\u00e3o. Ent\u00e3o se faz o agendamento dessa tarefa para ser executada mais tarde. * Uma das vantagens de se utilizar uma lista de tarefas \u00e9 o trabalho paralelo (Round-robin) . Round-robin : Se tiver mais de um consumidor, a mensagem ser\u00e1 enviada para o pr\u00f3ximo consumidor, em sequ\u00eancia.","title":"* Task Queue"},{"location":"Resumos/queue/#automatic-acknowledgment-mode","text":"Modo de reconhecimento autom\u00e1tico (ack). * Impede que uma mensagem se perca caso um consumidor falhar(canal fechado, conxe\u00e3o fechada, TCP perdido). Como funciona: 1. uma confirma\u00e7\u00e3o \u00e9 enviada pelo consumidor quando uma mensagem foi recebida, processada e que pode ser exclu\u00edda. 2. Se um consumidor morre sem enviar essa confirma\u00e7\u00e3o, o RabbitMQ entender\u00e1 que a mensagem n\u00e3o foi processada e a enfileirar\u00e1 novamente. 3. Se j\u00e1 houver outros consumidores online, esta ser\u00e1 entregue para ele. 4. N\u00e3o h\u00e1 nenhum tempo limite da mensagem. O rabbitMQ retornar\u00e1 a mensagem quando o consumidor morrer. Obs: A confirma\u00e7\u00e3o deve ser enviada no mesmo canal que recebeu a entrega!!!!!!! Para printar mensagens que n\u00e3o foram confirmadas(caso esque\u00e7a do ack): sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged","title":"Automatic Acknowledgment Mode"},{"location":"Resumos/queue/#prefetchx","text":"M\u00e9todo de pr\u00e9-busca. Indica ao RabbitMQ para n\u00e3o transmitit mais de x mensagens para um worker por vez. (n\u00e3o despache uma nova mensagem para um worker at\u00e9 que ele tenha terminado a anterior, em vez disso, ser\u00e1 enviado para o pr\u00f3ximo worker que n\u00e3o estiver ocupado)","title":"Prefetch(x)"}]}